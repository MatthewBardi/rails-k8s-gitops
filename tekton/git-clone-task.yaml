# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: git-clone
#   namespace: ruby-app
# spec:
#   description: Clone a Git repository
#   params:
#   - name: url
#     description: Repository URL to clone from
#     type: string
#   - name: revision
#     description: Revision to checkout (branch, tag, sha, ref, etc...)
#     type: string
#     default: "main"
#   workspaces:
#   - name: output
#     description: The git repo will be cloned onto the volume backing this Workspace
#   steps:
#   - name: clone
#     image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest
#     env:
#     - name: PARAM_URL
#       value: $(params.url)
#     - name: PARAM_REVISION
#       value: $(params.revision)
#     - name: WORKSPACE_OUTPUT_PATH
#       value: $(workspaces.output.path)
#     script: |
#       #!/usr/bin/env sh
#       set -eu
      
#       CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}"
      
#       # Clean up any existing content
#       cleandir() {
#         if [ -d "$CHECKOUT_DIR" ] ; then
#           rm -rf "$CHECKOUT_DIR"
#         fi
#       }
      
#       cleandir || true
      
#       # Clone the repository
#       git clone "${PARAM_URL}" "${CHECKOUT_DIR}"
#       cd "${CHECKOUT_DIR}"
#       git checkout "${PARAM_REVISION}"
      
#       echo "Successfully cloned ${PARAM_URL} at revision ${PARAM_REVISION}"

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  namespace: ruby-app
spec:
  description: Clone a Git repository
  params:
    - name: url
      description: Repository URL to clone from
      type: string
    - name: revision
      description: Revision to checkout (branch, tag, sha, ref, etc...)
      type: string
      default: "main"
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest
      env:
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}"

        # Clean up any existing content
        cleandir() {
          if [ -d "$CHECKOUT_DIR" ] ; then
            rm -rf "$CHECKOUT_DIR"
          fi
        }

        cleandir || true

        # Tell Git this directory is safe
        git config --global --add safe.directory "${CHECKOUT_DIR}"

        # Clone the repository
        git clone "${PARAM_URL}" "${CHECKOUT_DIR}"
        cd "${CHECKOUT_DIR}"
        git checkout "${PARAM_REVISION}"

        echo "Successfully cloned ${PARAM_URL} at revision ${PARAM_REVISION}"
